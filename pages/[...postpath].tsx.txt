import React from 'react';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import {GraphQLClient, gq1 } from 'graphql-request';

export const getServerSideProps: GetServerSideProps async (ctx) => {
const endpoint="https://trickinsights.com/graphql"
const graphQLClient = new GraphQLClient (endpoint);
const referringURL = ctx.req.headers?.referer || null;
const patharr = ctx.query.postpath as Array<string>;
const path = pathArr.join("/");
console.log(path);
const fbclid = ctx.query.fbclid;

// redirect if facebook is the referer or request contains fbclid
if (referringURL?. includes ('facebook.com') || fbclid) {

﻿
return {
        redirect: {
                   permanent: false,
                   destination: '${
                           "https://trickinsights.com/+encodeURI(path as string)
                    },
         };
         }
const query gq1*
{
              post(id: "/$(path)/", idType: URI) {
                      id
                      excerpt
                      title
                      link
                      dateGat
                      modifiedGat
                      content
                      author {
                              node {
                                     name
                               }
                        }
                        featuredImage {
                                node {
                                       sourceUrl
                                       altText
                                }
                         }
                }
            }
;
const data = await graphQLClient.request{query};
if (Idata.post) {
        return {
                notFound: true,
         };
   }
   return {
           props: {
                   path,
                   post: data.post,
                   host: ctx.req.headers.host,
              },
 };  

interface PostProps {
        post: any;
        host: string;
        path: string;
 }
const Post: React. FC<PostProps> = (props) => {
      const (post, host, path) = props;

// to remove tags from excerpt
const removeTags = (str: string) => {
       if (str ==  null || str === '') return ";
       else str = str.toString();
       return str.replace(/(<([^>]+)>)/g, "').replace(/\[[^\]]*\}/, "");
  };  
  return (
         <>
             <head>
﻿                   <meta property="og:title" content={post.title} />
                   <meta property="og:description" content={removeTags (post.excerpt)} />
                   <meta property="og:type" content="article" />
                   <meta property="og:locale" content="en_US" />
                   <meta property="og:site_name" content={host.split('.')[0]} />
                   <meta property="article: published_time" content={post.dateGmt} />
                   <meta property="article: modified_time" content={post.modified Gmt} />
                   <meta property="og:image" content={post. featured Image.node.sourceUrl} />
                   <meta
                         property="og:image:alt"
                         content={post.featured Image.node.altText || post.title}
                    />
                    <title>{post.title}</title>
 </head>
 <div className="post-container">
 <h1>{post.title}</h1>
 <img
     src={post.featured Image.node.sourceUrl}
     alt-{post.featured Image.node.altText || post.title}
  />
  <article dangerouslySetInnerHTML={{_html: post.content }} />

  </div>
       </>
    };
};
export default Post;